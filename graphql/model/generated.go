// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"github.com/pixlcrashr/squadmortar.xyz-sessions-server/math"
	"io"
	"strconv"
)

type Session struct {
	GUID    string    `json:"guid"`
	Users   []*User   `json:"users"`
	Weapons []*Weapon `json:"weapons"`
	Targets []*Target `json:"targets"`
}

type SessionUpdate struct {
	UserLeft      *User   `json:"userLeft"`
	UserJoined    *User   `json:"userJoined"`
	UserChanged   *User   `json:"userChanged"`
	TargetAdded   *Target `json:"targetAdded"`
	TargetChanged *Target `json:"targetChanged"`
	TargetRemoved *Target `json:"targetRemoved"`
	WeaponAdded   *Weapon `json:"weaponAdded"`
	WeaponChanged *Weapon `json:"weaponChanged"`
	WeaponRemoved *Weapon `json:"weaponRemoved"`
}

type Target struct {
	ID       int           `json:"id"`
	Position *math.Vector3 `json:"position"`
	Active   bool          `json:"active"`
	Owner    *User         `json:"owner"`
	IsOwned  bool          `json:"isOwned"`
}

type TargetInput struct {
	ID       int           `json:"id"`
	Position *Vector3Input `json:"position"`
	Active   *bool         `json:"active"`
}

type User struct {
	ClientGUID string `json:"clientGuid"`
	Name       string `json:"name"`
}

type Vector3Input struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

type Weapon struct {
	ID       int           `json:"id"`
	Type     WeaponType    `json:"type"`
	Position *math.Vector3 `json:"position"`
	Active   bool          `json:"active"`
	Owner    *User         `json:"owner"`
	IsOwned  bool          `json:"isOwned"`
}

type WeaponInput struct {
	ID       int           `json:"id"`
	Position *Vector3Input `json:"position"`
	Active   *bool         `json:"active"`
}

type WeaponType string

const (
	WeaponTypeStandardMortar  WeaponType = "StandardMortar"
	WeaponTypeTechnicalMortar WeaponType = "TechnicalMortar"
	WeaponTypeRockets         WeaponType = "Rockets"
	WeaponTypeHellCanon       WeaponType = "HellCanon"
)

var AllWeaponType = []WeaponType{
	WeaponTypeStandardMortar,
	WeaponTypeTechnicalMortar,
	WeaponTypeRockets,
	WeaponTypeHellCanon,
}

func (e WeaponType) IsValid() bool {
	switch e {
	case WeaponTypeStandardMortar, WeaponTypeTechnicalMortar, WeaponTypeRockets, WeaponTypeHellCanon:
		return true
	}
	return false
}

func (e WeaponType) String() string {
	return string(e)
}

func (e *WeaponType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeaponType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeaponType", str)
	}
	return nil
}

func (e WeaponType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
